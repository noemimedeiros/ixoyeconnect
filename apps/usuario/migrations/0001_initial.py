# Generated by Django 5.1.2 on 2024-11-06 00:19

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Denominacao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=120)),
            ],
            options={
                'db_table': 'denominacao',
            },
        ),
        migrations.CreateModel(
            name='Departamento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('departamento', models.CharField(max_length=50, verbose_name='Nome do Departamento')),
                ('descricao', models.TextField(blank=True, help_text='Este campo é opcional', null=True)),
            ],
            options={
                'db_table': 'departamento',
            },
        ),
        migrations.CreateModel(
            name='Funcao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('funcao', models.CharField(max_length=50, verbose_name='Nome da Função')),
                ('descricao', models.TextField(blank=True, help_text='Este campo é opcional', null=True)),
            ],
            options={
                'db_table': 'funcao',
            },
        ),
        migrations.CreateModel(
            name='RedeSocial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'redesocial',
            },
        ),
        migrations.CreateModel(
            name='InstituicaoSede',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('nome', models.CharField(max_length=60, verbose_name='Nome Completo')),
                ('celular', models.CharField(blank=True, max_length=16, null=True)),
                ('cnpj', models.CharField(max_length=20, unique=True)),
                ('sigla', models.CharField(max_length=10)),
                ('codigo', models.CharField(max_length=8, unique=True)),
                ('logo', models.ImageField(default='', upload_to='instituicao/logo/')),
                ('endereco', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.endereco', verbose_name='Endereço')),
            ],
            options={
                'db_table': 'instituicaosede',
            },
        ),
        migrations.CreateModel(
            name='Instituicao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=120)),
                ('sigla', models.CharField(blank=True, max_length=10, null=True)),
                ('denominacao', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usuario.denominacao')),
            ],
            options={
                'db_table': 'instituicao',
            },
        ),
        migrations.CreateModel(
            name='RedeSocialInstituicaoSede',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.CharField(max_length=50)),
                ('redesocial', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usuario.redesocial')),
                ('instituicao', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='redes_sociais', to='usuario.instituicaosede')),
            ],
            options={
                'db_table': 'redesocialinstituicaosede',
            },
        ),
        migrations.AddField(
            model_name='instituicaosede',
            name='instituicao',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usuario.instituicao'),
        ),
        migrations.CreateModel(
            name='FuncaoDepartamento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('departamento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usuario.departamento')),
                ('funcao', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usuario.funcao')),
                ('instituicao', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='usuario.instituicaosede')),
            ],
            options={
                'db_table': 'funcaodepartamento',
            },
        ),
        migrations.AddField(
            model_name='funcao',
            name='instituicao',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='usuario.instituicaosede'),
        ),
        migrations.AddField(
            model_name='departamento',
            name='instituicao',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='usuario.instituicaosede'),
        ),
        migrations.CreateModel(
            name='Membro',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('nome', models.CharField(max_length=60, verbose_name='Nome Completo')),
                ('celular', models.CharField(blank=True, max_length=16, null=True)),
                ('ano_ingressao', models.IntegerField(blank=True, null=True)),
                ('data_nascimento', models.DateField()),
                ('foto', models.ImageField(blank=True, max_length=255, null=True, upload_to='usuario/perfil')),
                ('desvinculado', models.BooleanField(default=0)),
                ('admin', models.BooleanField(default=False, help_text='Ao definir um usuário como admin, ele poderá ter acesso a publicar, editar ou excluir informações da Igreja.', verbose_name='Definir como Admin')),
                ('endereco', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.endereco', verbose_name='Endereço')),
                ('sede', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usuario.instituicaosede')),
            ],
            options={
                'db_table': 'membro',
            },
        ),
        migrations.CreateModel(
            name='FuncaoMembro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('departamento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usuario.departamento')),
                ('funcao', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usuario.funcao')),
                ('membro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='funcoes', to='usuario.membro')),
            ],
            options={
                'db_table': 'funcaomembro',
            },
        ),
    ]
